"""
Django settings for dongfeng project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import platform
import socket

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = environ.Path(__file__) - 2

env = environ.Env()

core_env = env.str("DONGFENG_ENV", "")
if not core_env:
    p = platform.system().lower()
    hostname = socket.gethostname()
    if "darwin" in p or "macos" in p or "windows" in p or hostname.startswith("DESKTOP-"):
        core_env = "dev"
    else:
        core_env = "prod"

# 指定encoding
with open(f"{BASE_DIR.path('.envs')}/{core_env}.env", encoding="utf-8") as f:
    env.read_env(f)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True if core_env == "dev" else False

ALLOWED_HOSTS = [".df-proj.com", "localhost", "127.0.0.1", "testserver", env.str("HOST", "127.0.0.1")]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party
    "debug_toolbar",
    "rest_framework",
    "rest_framework.authtoken",
    # Custom
    "apps.overwatch",
    "apps.spaceport",
    "apps.warehouse",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "dongfeng.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(BASE_DIR.path("templates"))],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "dongfeng.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {"default": env.db()}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "zh-hans"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = env.path("STATIC_ROOT")
STATICFILES_DIRS = [str(BASE_DIR.path("static"))]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Rest Framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework.authentication.SessionAuthentication",),
    "DEFAULT_RENDERER_CLASSES": (
        "utils.render.DFJsonRender",
        # "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    )
    if DEBUG
    else ("utils.render.DFJsonRender",),
}
TOKEN = env.str("TOKEN", "")

# 日志
_fmt = "%(asctime)s | %(levelname)-7s | %(name)s:%(funcName)s:%(lineno)s | %(message)s"

log_file = f"{BASE_DIR}/logs/dongfeng.log"
log_dir = os.path.split(log_file)[0]
if not os.path.exists(log_dir):
    os.mkdir(log_dir)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "console_fmt": {"format": _fmt, "datefmt": "%Y-%m-%d %H:%M:%S"},
        "file_fmt": {"format": _fmt, "datefmt": "%Y-%m-%d %H:%M:%S"},
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "level": "DEBUG", "formatter": "console_fmt"},
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "level": "DEBUG",
            "formatter": "file_fmt",
            "filename": log_file,
            "encoding": "utf-8",
            "maxBytes": 1024 * 1024 * 10,  # 10MB
            "backupCount": 5,
        },
    },
    "loggers": {
        "": {"handlers": ["console"], "level": "DEBUG" if DEBUG else "INFO"},
        "apps": {"handlers": ["console", "file"], "level": "DEBUG" if DEBUG else "INFO"},
        "django": {"handlers": ["console"], "level": "INFO", "propagate": False},
        "django.request": {"handlers": ["console"], "level": "ERROR", "propagate": False},
        "celery": {"handlers": ["console"], "level": "INFO"},
        "httpx": {"handlers": ["console"], "level": "INFO"},
    },
}

# Celery
CELERY_BROKER_URL = env("CELERY_BROKER_URL", default="redis://localhost:6379/0")
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_SERIALIZER = "pickle"
CELERY_RESULT_SERIALIZER = CELERY_SERIALIZER
CELERY_EVENT_SERIALIZER = CELERY_SERIALIZER
CELERY_ACCEPT_CONTENT = ["application/x-python-serialize", "application/json"]
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

CELERY_TIMEZONE = TIME_ZONE

CELERY_TASK_SOFT_TIME_LIMIT = 600  # seconds
CELERY_TASK_TIME_LIMIT = 1800  # seconds
CELERY_TASK_MAX_RETRIES = 3

# API
API_HOST = f"{env.str('HOST', '127.0.0.1')}:{env.int('PORT', 8000)}"
API_HTTPS = env.bool("API_HTTPS", False)

# Debug
if DEBUG:
    INTERNAL_IPS = ["127.0.0.1", env.str("HOST", "127.0.0.1")]
